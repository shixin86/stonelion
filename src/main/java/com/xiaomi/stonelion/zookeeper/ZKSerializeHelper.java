
package com.xiaomi.stonelion.zookeeper;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.nio.charset.Charset;
import java.util.Properties;

/**
 * 一个Helper类，帮助把从zk上获取的数据解码。
 * @author shixin
 * @date Aug 22, 20131:41:43 PM
 * @Description TODO
 */
public class ZKSerializeHelper {
    private static Logger logger = LoggerFactory.getLogger(ZKSerializeHelper.class);
    private static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");

    static interface ZKSerializer<T> {
        T deserialize(byte[] bytes);

        byte[] serialize(T data);
    }

    @SuppressWarnings({
        "synthetic-access"
    })
    public static <T> ZKSerializer find(Class<T> clazz) {
        if (clazz == Properties.class) {
            return new PropertiesSerializer();
        }

        if (clazz == String.class) {
            return new StringSerializer();
        }

        throw new UnsupportedOperationException(String.format("The class %s is not supported.", clazz)); //$NON-NLS-1$
    }

    private static class PropertiesSerializer implements ZKSerializer<Properties> {
        @Override
        public Properties deserialize(byte[] bytes) {
            Reader inputReader = new InputStreamReader(new ByteArrayInputStream(bytes), DEFAULT_CHARSET);
            try {
                Properties p = new Properties();
                p.load(inputReader);
                return p;
            } catch (IOException e) {
                logger.error("Deserialize properties failed.", e);
                return null;
            } finally {
                if (null != inputReader)
                    try {
                        inputReader.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
            }
        }

        @Override
        public byte[] serialize(Properties data) {
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            Writer propertiesWriter = new OutputStreamWriter(os, DEFAULT_CHARSET);
            try {
                data.store(propertiesWriter, "Generated by ZKClient -- PropertiesSerializer"); //$NON-NLS-1$
            } catch (IOException e) {
                logger.error("Serialize properties failed.", e);
            } finally {
                if (null != propertiesWriter)
                    try {
                        propertiesWriter.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
            }
            return os.toByteArray();
        }
    }

    private static class StringSerializer implements ZKSerializer<String> {
        @Override
        public String deserialize(byte[] bytes) {
            return new String(bytes, DEFAULT_CHARSET);
        }

        @Override
        public byte[] serialize(String data) {
            return data.getBytes(DEFAULT_CHARSET);
        }
    }
}
